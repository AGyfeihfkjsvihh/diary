今天对象生气了
哎
都是因为我
头一天答应人家去吃肯德基
然后中午起来晚了，中午去上的班，要到晚上8点多才能去吃饭，下午5点多的时候实在撑不住了，吃了碗麻辣烫，然后跟对象说了
然后对象就生气了
说我没办法陪她去店里一起吃了，那样就没意思了
当时我确实也是吃不下去什么东西了
然后对象就不搭理我了
最后还是我说自己心情不好，有话想跟她说，才把她哄过来，哈哈哈哈
然后回家后抱着她一顿哄，最后终于愿意用手机点餐了，嘿嘿嘿，有点心疼她呢，毕竟下午一直也没吃饭
另外，对象的脸脸可太好rua了~




今天依旧是划水的一天，正经工作依然没怎么做，一直在看一篇关于域内ACL提权的文章，一边看，一边翻译，翻译的内容如下：
***********************************************************翻译内容**********************************************************************
原文：https://blog.fox-it.com/2018/04/26/escalating-privileges-with-acls-in-active-directory/


在内部测试中，通常我们可能会在短短几个小时内获取到域控制器的权限
之所以这么快拿到权限，无外乎不充分的系统加固以及使用不安全的默认设置
在这种场景下，仅使用公开可用的工具即可获取到域控权限
这篇博文描述了在常规手段无法使用的情况下，我们必须挖掘更深层次的东西从而在域中获取更高的权限
我们将会介绍更高级的权限提升攻击手法，通过使用ACL以及一个新的叫做Invoke-Aclpwn（https://github.com/fox-it/Invoke-ACLPwn）的工具和ntlmrelayx（https://github.com/CoreSecurity/impacket/blob/master/examples/ntlmrelayx.py）扩展来自动化整个攻击流程


# AD、ACL和ACE
随着政企组织在面对网络安全问题时正变得越来越成熟和警觉，我们必须挖掘得更深才能提升我们在域内的权限
在这种场景中，枚举是关键
常常被忽略的是AD中的ACL
一个ACL是一系列规则的集合，这些规则定义了哪些实体对AD中的特定对象有哪些权限
AD中的对象可以使一个用户账户，也可以是OU，OU之于AD就像是一个目录
在OU上配置ACL的主要优势就是当你正确地配置之后，该OU中的所有子对象都会继承该OU上配置的ACL
ACL包含一个ACE，ACE定义了该OU及其子对象的身份以及相应权限
ACE中指定的身份，并不一定是用户账户本身，更常见的是一个AD安全组
通过将用户加入到该安全组中，该用户就会被赋予在ACE中配置的相应权限，该权限是从ACE中指定的用户组继承来的


在AD中，组的关系是递归的，比如说我们有下面三个组
GroupA
GroupB
GroupC
c是b的一个成员，b是a的成员
当我们将Bob添加到c中，Bob将不仅仅是c的成员，同时也是b和a的成员（间接）
这就意味着，当某个对象或者资源的访问权限被赋予了a时，Bob将也能访问到该对象
这个资源可以是一个NTFS文件共享，打印机或者一个AD对象，比如用户、电脑、组甚至是domain本身


给AD安全组提供权限和访问权是一个非常棒的用于管理IT基础设施的方式
尽管如此，他同时也存在着潜在的安全风险
正如上面所描述的，一个用户账户将会继承他所在的（直接或者间接）组对某个资源所拥有的所有权限
如果a被赋予了更改AD中对象的权限，那么很明显Bob也继承了该权限
但是如果一个用户仅是一个组的直接成员，但是这个组是50个其他组的间接成员，那么就很难理清权限的继承情况了


# 在AD中通过exchange提升权限
在最近的一次渗透测试中，我们获取到了一个用户权限，该用户是Organization Management安全组的成员
这个组会在exchange安装时创建，然后为后续的exchange相关的活动提供访问权限
除了能够访问到exchange的一些设置之外，他还允许本组内的成员更改其他exchange安全组的组成员关系，比如Exchange Trusted Subsystem安全组
这个组是Exchange Windows Permissions安全组的一个成员


默认情况下，Exchange Windows Permissions安全组在该Exchange安装的域中拥有writeDACL权限
writeDACL权限允许我们修改特定对象的ACL，这也就意味着Organization Management组中的用户能够提升至域管理员权限
要想利用这个漏洞，我们需要先把之前获取到的用户添加到Exchange Trusted Subsystem组中
然后我们重新登录（因为安全组成员关系只会在登陆的时候重新载入），现在我们是Exchange Trusted Subsystem和Exchange Windows Permission组中的一个成员了，这样我们就可以更改域中的ACL了


如果你拥有了更改AD对象的ACL的权限，那么你就能向一个实体赋予对某个属性的写权限，比如包含了电话号码的属性
除了能够赋予读写权限之外，还有可能做更多的事情
这些权力是一些预定义的任务，比如修改密码，发送邮件到一个邮箱以及其他更多的事情
同时也有可能将任意给定的账户修改为域的复制同伴，可以通过修改以下扩展权限获得
Replicating Directory Changes
Replicating Directory Changes All


当我们为自己的用户设置了这些权限之后，我们就能够获取域中人以用户的hash，包括krbtgt账户
更过详细技术细节，可以在这里找到：https://github.com/gdedrouas/Exchange-AD-Privesc


获取到一个位于Organization Management组的用户这种事并不会经常发生
尽管如此，我们依然可以在此基础上更广泛地使用该技术
Organization Management这个组有可能被其他的安全组管理，而这个组又有可能被另外的组管理着……
这意味着在域中可能有一条很难发现的链条存在，但是一旦正确地关联起来，就有可能获取到整个域的控制权限


为了帮助利用这条潜在的安全风险链，Fox-IT编写了两个工具
第一个工具是使用ps编写的，可以运行在AD环境中或者外部环境
第二个工具是ntlmrelayx的扩展，这个扩展允许攻击者中继账户（用户账户或者机器账户）到AD并更改域对象的ACL


## Invoke-ACLPwn


Invoke-ACLPwn是一个ps脚本，专门用来在集成凭证以及指定凭证的情况下运行
这个工具使用SharpHound导出域中所有的ACL以及运行时提供的用户账户的组关系
如果当前用户没有对域对象的writeDACL权限，此工具将会枚举域内所有的ACE和ACL
每一个ACE中的实体都有自己的ACL，这些ACL也会被加入枚举的队列中
如果该实体是一个组并且组内有成员，那么该组内所有的成员也会被加入到枚举队列中
正如你想象的那样，这会花很长时间，但是最后他会生成一个获取到writeDACL权限的链条


当这个利用链被计算出来之后，本脚本将会开始逐步进行利用


当前用户会被添加到必要的组中
下面两个ACE将会被添加到域对象的ACL中
Replicating Directory Changes
Replicating Directory Changes All
这是一个可选项：
Mimkatzs的DCSync特性可以被引用进来以导出krbtgt账户的hash


利用完成之后，脚本会自动将用户移除出之前添加进去的组以及域对象的ACL中的ACE（就是上面添加的那两个ACE）


为了测试这个脚本，我们创建了26个安全组，每一个组都是另一个组的成员（testgroup_a是testgroup_b的成员，b又是c的成员，以此类推）
安全组z拥有更改Organization Management安全组的组成员关系的权限
正如前面提到的，这个组拥有更改Exchage Trusted Subsystem安全组的组成员关系的权限
成为该组的成员将会让你拥有更改AD中域对象的ACL的权限


现在我们有了一个长达31的链条
26个安全组的间接成员关系
更改Organization Management安全组的成员关系的权限
Organization Management的组成员关系
更改Exchange Trusted Subsystem安全组的组成员关系的权限
Exchange Trusted Subsystem安全组以及Exchange Windows Permission的组成员关系


需要注意的是，在例子中我们使用了安装exchange时配置的ACL，但是该脚本其实是不依赖于exchange或者其他的任何产品的
即使没有这些东西，他也照样能进行漏洞利用


当前，该脚本仅仅能利用writeDACL权限进行漏洞利用，但实际上还有其他很多类型的权限可以进行利用
比如owner、writeOwner等等，这些都能被利用
这些访问权限在这个白皮书（BloodHound团队）中有详细的介绍：specterops.io/assets/resources/an_ace_up_the_sleeve.pdf
后续的更新中将会开发利用其他特权的功能并发布出来




## NTLMRelayx
去年我们给ntlmrelayx新增了一些内容，以允许他中继LDAP，通过向目录中添加新用户，可以进行域内枚举以及域权限提升
在以前，ntlmrelayx中的LDAP攻击会检测中继过来的账户是否是域管理员或者企业管理员组的成员


***********************************************************翻译内容**********************************************************************
下班了，回到家，继续看，但是家里的电脑被我装起来了，域环境暂时是用不了了，这个文章留着明天划水的时候继续看吧
我还是继续看我的C++


昨天看了左值右值，今天看C++的move 语义
今天看的这篇文章是关于右值引用和move语义
在C++中，右值的中心思想就是临时的，短命的值，这些值你是没有办法改变的


然而，C++引入了一个新的叫做右值引用的概念，这个东西赋予了我们修改这些临时对象的能力


对象非让我去床上陪她，最后要睡觉，翻来覆去的睡不着，这时候都快凌晨1点了，一直在想以前的事情，后来还是起来继续看文章了


看这一段代码来体会右值引用：https://github.com/AGyfeihfkjsvihh/code/blob/main/5
右值引用的符号是两个&，也就是&&
这样声明出来的引用可以保存右值，并且可以在后续改变右值的值


可能第一眼看上去，你会觉得右值引用屁用没有，但是实际上他为move语义的实现铺平了道路，而且可以显著提升你的应用程序性能
外头风太大，我得去关一下窗户，不然对象一会儿该被吓醒了，我还是去睡觉吧，不然明天起不来她要生气了



